name: Build and Release Binary

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g. v0.1.0)'
        required: true
        type: string

jobs:
  build:
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            name: linux-x86_64
          - target: x86_64-apple-darwin
            os: macos-latest
            name: macos-x86_64
          - target: aarch64-apple-darwin
            os: macos-latest
            name: macos-aarch64
          - target: x86_64-pc-windows-gnu
            os: windows-latest
            name: windows-x86_64
    
    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Build Binary
        run: cargo build --release --target ${{ matrix.target }} --locked
        env:
          MACOSX_DEPLOYMENT_TARGET: ${{ matrix.target == 'x86_64-apple-darwin' && '10.15' || matrix.target == 'aarch64-apple-darwin' && '11.0' || '' }}

      - name: Create Release Directory
        run: mkdir -p release

      - name: Archive Binary (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          cp target/${{ matrix.target }}/release/creator release/
          cd release
          tar -czf creator-${{ github.event.inputs.version }}-${{ matrix.name }}.tar.gz creator
          if [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            shasum -a 256 creator-${{ github.event.inputs.version }}-${{ matrix.name }}.tar.gz > creator-${{ github.event.inputs.version }}-${{ matrix.name }}.tar.gz.sha256
          else
            sha256sum creator-${{ github.event.inputs.version }}-${{ matrix.name }}.tar.gz > creator-${{ github.event.inputs.version }}-${{ matrix.name }}.tar.gz.sha256
          fi

      - name: Archive Binary (Windows)
        if: matrix.os == 'windows-latest'
        shell: powershell
        run: |
          cp target/${{ matrix.target }}/release/creator.exe release/
          cd release
          Compress-Archive -Path creator.exe -DestinationPath creator-${{ github.event.inputs.version }}-${{ matrix.name }}.zip
          Get-FileHash creator-${{ github.event.inputs.version }}-${{ matrix.name }}.zip -Algorithm SHA256 | Select-Object Hash | Out-File -FilePath creator-${{ github.event.inputs.version }}-${{ matrix.name }}.zip.sha256

      - name: Upload Release Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}-release
          path: release/creator-${{ github.event.inputs.version }}-${{ matrix.name }}.*

  release:
    needs: build
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
          
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event.inputs.version }}
          name: Release ${{ github.event.inputs.version }}
          files: ./artifacts/**/*
          generate_release_notes: true
          body: |
            ## üöÄ Release ${{ github.event.inputs.version }}
            
            ### üì¶ Available Binaries:
            - **Linux x86_64**: `creator-${{ github.event.inputs.version }}-linux-x86_64.tar.gz`
            - **macOS x86_64**: `creator-${{ github.event.inputs.version }}-macos-x86_64.tar.gz`
            - **macOS ARM64**: `creator-${{ github.event.inputs.version }}-macos-aarch64.tar.gz`
            - **Windows x86_64**: `creator-${{ github.event.inputs.version }}-windows-x86_64.zip`
            
            ### üîê Security Verification:
            Each binary includes a `.sha256` file for integrity verification.
            
            **Verification example on Linux/macOS:**
            ```bash
            sha256sum -c creator-${{ github.event.inputs.version }}-linux-x86_64.tar.gz.sha256
            ```
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
